Repo: https://github.com/jitsi-contrib/jitsi-helm


cluster 구축 후,

kubectl config get-contexts
kubectl config use-context context-jitsi  

******************************
        [Installing helm]
******************************

https://helm.sh/docs/intro/install/
https://www.digitalocean.com/community/tutorials/how-to-install-software-on-kubernetes-clusters-with-the-helm-3-package-manager
https://docs.digitalocean.com/products/kubernetes/how-to/manage-1click-apps/#installing-via-control-panel


************************************************
        [Installing ingress-nginx package]
************************************************
cf. (general) kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml
cf. (DO specific) kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/do/deploy.yaml

    cf. kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx --watch

    cf. doctl compute load-balancer list


helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update ingress-nginx
helm search repo ingress-nginx

    cf. helm show values ingress-nginx --repo https://kubernetes.github.io/ingress-nginx
    cf. helm show values ingress-nginx/ingress-nginx

helm upgrade --install ingress-nginx ingress-nginx  --repo https://kubernetes.github.io/ingress-nginx  --namespace ingress-nginx --create-namespace
    cf. helm install nginx-ingress ingress-nginx/ingress-nginx --set controller.publishService.enabled=true --namespace ingress-nginx --create-namespace
    cf.
        NGINX_CHART_VERSION="<chart-version>"
        helm install ingress-nginx ingress-nginx/ingress-nginx --version "$NGINX_CHART_VERSION" \
        --namespace ingress-nginx \
        --create-namespace \
        -f "<path-to-values-file>.yml"

    cf. 업데이트 필요 시 (version 바꾸어서 실행):
        helm show values ingress-nginx/ingress-nginx > ingress-nginx.values.yml
        helm upgrade ingress-nginx ingress-nginx/ingress-nginx --version 4.7.1 \
        --namespace ingress-nginx \
        --values ingress-nginx.values.yml


************************************************
        [Installing cent manager]
************************************************
cf. for latest version
https://artifacthub.io/packages/helm/cert-manager/cert-manager

kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.2/cert-manager.yaml

kubectl get pods --namespace cert-manager

(test용) kubectl create -f staging_issuer.yaml
kubectl create -f prod_issuer.yaml

kubectl apply -f ingress_nginx_extraction.yaml

************************************************
        [Installing jitsi meet]
************************************************

helm repo add jitsi https://jitsi-contrib.github.io/jitsi-helm/
helm search repo jitsi-meet

kubectl create namespace jitsi

DNS A record 편집 && values IP 편집
  cf. values-SI.yaml 파일에서 room2.istudiomeet.com 를 본인 소유의 적절한 도메인으로 수정합니다.
  cf. https://github.com/jitsi-contrib/jitsi-helm/blob/main/values.yaml
  cf.   or [ip].nip.io

helm install  --namespace jitsi istudiomeet-k8s jitsi/jitsi-meet --values=values-SI.yaml
  cf. helm upgrade --namespace jitsi istudiomeet-k8s jitsi/jitsi-meet --values=values-SI.yaml
  cf. helm upgrade --namespace jitsi istudiomeet-k8s jitsi/jitsi-meet --values=values-SI.yaml --reuse-values
  cf. kubectl get svc -n jitsi istudiomeet-k8s-jitsi-meet-jvb -o yaml

(Software bug, 수동으로 편집)
    kubectl edit service istudiomeet-k8s-jitsi-meet-jvb -n jitsi
    - name: tcp
        port: 8080
        protocol: TCP
        targetPort: 8080


Tips:
    Operation check:
        cf. (test) wget --save-headers -O- room2.istudiomeet.com
        cf. nc -vz -u UDP_loadbalancer_ip 10000
        cf. curl -v UDP_loadbalancer_ip:8080/about/health

    kubectl exec -it -n jitsi svc/istudiomeet-k8s-jitsi-meet-jvb -- /bin/bash
    kubectl logs -n jitsi svc/istudiomeet-k8s-jitsi-meet-jvb

    https://github.com/sudermanjr/utilities/blob/master/utility-deploy.yaml
    kubectl exec -it utilities-f4b5c6954-cnnc7 -- /bin/bash
    OR
    kubectl run busybox -it --image=busybox:1.28 --restart=Never --rm
